{"version":3,"sources":["webpack:///./src/environments/environment.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/customer/customerlist.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/customer/customer.component.html","webpack:///./src/app/customer/customerlist.component.html","webpack:///./src/app/product.service.ts","webpack:///./src/app/customer/customerlist.component.ts","webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/customer/customer.component.ts","webpack:///./src/app/customer/customer.ts","webpack:///./src/app/product/product-routing.module.ts","webpack:///./src/app/product/product.module.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = 154\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/customer/customerlist.component.css\n// module id = 155\n// module chunks = 1","module.exports = \"<div>\\n        <nav class='navbar navbar-default'>\\n            <div class='container-fluid'>\\n                <a class='navbar-brand'>{{pageTitle}}</a>\\n                <ul class='nav navbar-nav'>\\n                    <li><a [routerLink]=\\\"['/welcome']\\\">Home</a></li>\\n                    <li><a [routerLink]=\\\"['/products']\\\">Product List</a></li>\\n                    <li><a [routerLink]=\\\"['/productEdit/0']\\\">Add Product</a></li>\\n                </ul>\\n            </div>\\n        </nav>\\n        <div class='container'>\\n            <router-outlet></router-outlet>\\n        </div>\\n     </div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = 157\n// module chunks = 1","module.exports = \"<div class=\\\"panel panel-primary\\\">\\r\\n    <div class=\\\"panel-heading\\\">\\r\\n        Sign Up!\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"panel-body\\\">\\r\\n        <form class=\\\"form-horizontal\\\"\\r\\n              novalidate\\r\\n              (ngSubmit)=\\\"save(signupForm)\\\"\\r\\n              #signupForm=\\\"ngForm\\\">\\r\\n            <fieldset>\\r\\n                <div class=\\\"form-group\\\"\\r\\n                    [ngClass]=\\\"{'has-error': (firstNameVar.touched || firstNameVar.dirty) && !firstNameVar.valid }\\\">\\r\\n                    <label class=\\\"col-md-2 control-label\\\" \\r\\n                           for=\\\"firstNameId\\\">First Name</label>\\r\\n\\r\\n                    <div class=\\\"col-md-8\\\">\\r\\n                        <input class=\\\"form-control\\\" \\r\\n                               id=\\\"firstNameId\\\" \\r\\n                               type=\\\"text\\\" \\r\\n                               placeholder=\\\"First Name (required)\\\" \\r\\n                               required \\r\\n                               minlength=\\\"3\\\"\\r\\n                               [(ngModel)]=customer.FirstName\\r\\n                               name=\\\"FirstName\\\"\\r\\n                               #firstNameVar=\\\"ngModel\\\" />\\r\\n                        <span class=\\\"help-block\\\" *ngIf=\\\"(firstNameVar.touched || firstNameVar.dirty) && firstNameVar.errors\\\">\\r\\n                            <span *ngIf=\\\"firstNameVar.errors.required\\\">\\r\\n                                Please enter your first name.\\r\\n                            </span>\\r\\n                            <span *ngIf=\\\"firstNameVar.errors.minlength\\\">\\r\\n                                The first name must be longer than 3 characters.\\r\\n                            </span>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group\\\"\\r\\n                    [ngClass]=\\\"{'has-error': (lastNameVar.touched || lastNameVar.dirty) && !lastNameVar.valid }\\\">\\r\\n                    <label class=\\\"col-md-2 control-label\\\" \\r\\n                        for=\\\"lastNameId\\\">Last Name</label>\\r\\n\\r\\n                    <div class=\\\"col-md-8\\\">\\r\\n                        <input class=\\\"form-control\\\" \\r\\n                               id=\\\"lastNameId\\\" \\r\\n                               type=\\\"text\\\" \\r\\n                               placeholder=\\\"Last Name (required)\\\" \\r\\n                               required \\r\\n                               maxlength=\\\"50\\\"\\r\\n                               [(ngModel)]=\\\"customer.LastName\\\"\\r\\n                               name=\\\"LastName\\\"\\r\\n                               #lastNameVar=\\\"ngModel\\\" />\\r\\n                        <span class=\\\"help-block\\\" *ngIf=\\\"(lastNameVar.touched || lastNameVar.dirty) && lastNameVar.errors\\\">\\r\\n                            <span *ngIf=\\\"lastNameVar.errors.required\\\">\\r\\n                                Please enter your last name.\\r\\n                            </span>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                </div>\\r\\n               <div class=\\\"form-group\\\"\\r\\n                    [ngClass]=\\\"{'has-error': (emailVar.touched || emailVar.dirty) && !emailVar.valid }\\\">\\r\\n                    <label class=\\\"col-md-2 control-label\\\" \\r\\n                        for=\\\"emailId\\\">Email</label>\\r\\n\\r\\n                    <div class=\\\"col-md-8\\\">\\r\\n                        <input class=\\\"form-control\\\" \\r\\n                               id=\\\"emailId\\\" \\r\\n                               type=\\\"text\\\" \\r\\n                               placeholder=\\\"Email (required)\\\" \\r\\n                               required\\r\\n                               pattern=\\\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\"\\r\\n                               [(ngModel)]=\\\"customer.Email\\\"\\r\\n                               name=\\\"Email\\\"\\r\\n                               #emailVar=\\\"ngModel\\\" />\\r\\n                        <span class=\\\"help-block\\\" *ngIf=\\\"(emailVar.touched || emailVar.dirty) && emailVar.errors\\\">\\r\\n                            <span *ngIf=\\\"emailVar.errors.required\\\">\\r\\n                                Please enter your email address.\\r\\n                            </span>\\r\\n                            <span *ngIf=\\\"emailVar.errors.pattern\\\">\\r\\n                                Please enter a valid email address.\\r\\n                            </span>\\r\\n\\r\\n                            <!-- This one does not work -->\\r\\n                            <span *ngIf=\\\"emailVar.errors.email\\\">\\r\\n                                Please enter a valid email address.\\r\\n                            </span>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                </div>\\r\\n               \\r\\n                <!--\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <div class=\\\"col-md-offset-1 col-md-8 checkbox\\\" >\\r\\n                        <label>\\r\\n                            <input id=\\\"sendCatalogId\\\"\\r\\n                                   type=\\\"checkbox\\\"\\r\\n                                   [(ngModel)]=\\\"customer.sendCatalog\\\"\\r\\n                                   name=\\\"sendCatalog\\\" >\\r\\n                            Send me your catalog\\r\\n                        </label>\\r\\n                    </div>\\r\\n                </div>\\r\\n                \\r\\n                <div *ngIf=\\\"customer.sendCatalog\\\">\\r\\n                    <div class=\\\"form-group\\\" >\\r\\n                        <label class=\\\"col-md-2 control-label\\\">Address Type</label>\\r\\n                        <div class=\\\"col-md-8\\\">\\r\\n                                <label class=\\\"radio-inline\\\">\\r\\n                                    <input type=\\\"radio\\\" id=\\\"addressType1Id\\\" value=\\\"home\\\"\\r\\n                                           [(ngModel)]=\\\"customer.addressType\\\"\\r\\n                                           name=\\\"addressType\\\">Home\\r\\n                                </label>\\r\\n                                <label class=\\\"radio-inline\\\">\\r\\n                                    <input type=\\\"radio\\\" id=\\\"addressType1Id\\\" value=\\\"work\\\"\\r\\n                                           [(ngModel)]=\\\"customer.addressType\\\"\\r\\n                                           name=\\\"addressType\\\">Work\\r\\n                                </label>\\r\\n                                <label class=\\\"radio-inline\\\">\\r\\n                                    <input type=\\\"radio\\\" id=\\\"addressType1Id\\\" value=\\\"other\\\"\\r\\n                                           [(ngModel)]=\\\"customer.addressType\\\"\\r\\n                                           name=\\\"addressType\\\">Other\\r\\n                                </label>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <label class=\\\"col-md-2 control-label\\\" \\r\\n                            for=\\\"street1Id\\\">Street Address 1</label>\\r\\n                        <div class=\\\"col-md-8\\\">\\r\\n                            <input type=\\\"text\\\" \\r\\n                                   class=\\\"form-control\\\" \\r\\n                                   id=\\\"street1Id\\\" \\r\\n                                   placeholder=\\\"Street address\\\"\\r\\n                                   [(ngModel)]=\\\"customer.street1\\\"\\r\\n                                   name=\\\"street1\\\">\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <label class=\\\"col-md-2 control-label\\\" \\r\\n                            for=\\\"street2Id\\\">Street Address 2</label>\\r\\n                        <div class=\\\"col-md-8\\\">\\r\\n                            <input type=\\\"text\\\" \\r\\n                                   class=\\\"form-control\\\" \\r\\n                                   id=\\\"street2Id\\\"\\r\\n                                   placeholder=\\\"Street address (second line)\\\"\\r\\n                                   [(ngModel)]=\\\"customer.street2\\\"\\r\\n                                   name=\\\"street2\\\">\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <label class=\\\"col-md-2 control-label\\\" \\r\\n                            for=\\\"cityId\\\">City, State, Zip Code</label>\\r\\n                        <div class=\\\"col-md-3\\\">\\r\\n                            <input type=\\\"text\\\" \\r\\n                                   class=\\\"form-control\\\" \\r\\n                                   id=\\\"cityId\\\" \\r\\n                                   placeholder=\\\"City\\\"\\r\\n                                   [(ngModel)]=\\\"customer.city\\\"\\r\\n                                   name=\\\"city\\\">\\r\\n                        </div>\\r\\n                        <div class=\\\"col-md-3\\\">\\r\\n                            <select class=\\\"form-control\\\"\\r\\n                                    id=\\\"stateId\\\"\\r\\n                                    [(ngModel)]=\\\"customer.state\\\"\\r\\n                                    name=\\\"state\\\">\\r\\n                                <option value=\\\"\\\" disabled selected hidden>Select a State...</option>\\r\\n                                <option value=\\\"AL\\\">Alabama</option>\\r\\n                                <option value=\\\"AK\\\">Alaska</option>\\r\\n                                <option value=\\\"AZ\\\">Arizona</option>\\r\\n                                <option value=\\\"AR\\\">Arkansas</option>\\r\\n                                <option value=\\\"CA\\\">California</option>\\r\\n                                <option value=\\\"CO\\\">Colorado</option>\\r\\n                                <option value=\\\"WI\\\">Wisconsin</option>\\r\\n                                <option value=\\\"WY\\\">Wyoming</option>\\r\\n                            </select>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-md-2\\\">\\r\\n                        <input type=\\\"number\\\"\\r\\n                                   class=\\\"form-control\\\" \\r\\n                                   id=\\\"zipId\\\" \\r\\n                                   placeholder=\\\"Zip Code\\\"\\r\\n                                   [(ngModel)]=\\\"customer.zip\\\"\\r\\n                                   name=\\\"zip\\\">\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n-->\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <div class=\\\"col-md-4 col-md-offset-2\\\">\\r\\n                        <span>\\r\\n                            <button class=\\\"btn btn-primary\\\"\\r\\n                                    type=\\\"submit\\\"\\r\\n                                    [disabled]=\\\"!signupForm.valid\\\">\\r\\n                                Save\\r\\n                            </button>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </fieldset>\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\\r\\n<br>Dirty: {{ signupForm.dirty }} \\r\\n<br>Touched: {{ signupForm.touched }}\\r\\n<br>Valid: {{ signupForm.valid }}\\r\\n<br>Value: {{ signupForm.value | json }}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/customer/customer.component.html\n// module id = 158\n// module chunks = 1","module.exports = \"<p>\\n  customerlist works!\\n</p>\\n<div class='panel panel-primary'>\\n    <div class='panel-heading'>\\n        {{pageTitle}}\\n    </div>\\n    <!-- Filter the Products   -->\\n    <div class='panel-body'>\\n      <!--\\n        <div class='row'>\\n            <div class='col-md-2'>Filter by:</div>\\n            <div class='col-md-4'>\\n                <input type='text' [(ngModel)]='listFilter' />\\n            </div>\\n        </div>\\n        <div class='row' *ngIf='listFilter'>\\n            <div class='col-md-6'>\\n                <h3>Filtered by: {{listFilter}} </h3>\\n            </div>\\n        </div>\\n\\n        <div class='has-error' *ngIf='errorMessage'>{{errorMessage}}</div>\\n-->\\n        <div class='table-responsive'>\\n            <table class='table'\\n                   *ngIf='products && products.length'>\\n                <thead>\\n                    <tr>\\n                        <th>FirstName</th>\\n                        <th>LastName</th>\\n                        <th>Email</th>\\n                       </tr>\\n                </thead>\\n                <tbody>\\n                    <tr *ngFor='let product of products'>\\n                        <td>{{product.FirstName}}</td>\\n                        <td>{{ product.LastName }}</td>\\n                        <td>{{ product.Email }}</td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/customer/customerlist.component.html\n// module id = 159\n// module chunks = 1","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions} from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/of';\nimport { Customer } from './customer/customer';\n@Injectable()\nexport class ProductService {\n  private customerUrl = '/sites/TestDev1/_api/web/lists/GetByTitle('+\"'HelloList'\"+')/items';\n  public BAR=JSON.stringify({\"FirstName\":\"test1\",\"LastName\":\"test1\",\"Email\":\"test1@test.com\",\"__metadata\":{\"type\":\"SP.Data.HelloListListItem\"}});\n  constructor(private http: Http) { }\n  getCustomers(): Observable<Customer[]> {\n    let headers = new Headers({ 'Accept': 'application/json;odata=verbose' });\n    let options = new RequestOptions({ headers: headers });\n   return this.http.get(this.customerUrl, options)\n                    .map(this.extractData)\n                    //.do(data => data)\n                    .catch(this.handleError);\n  }\n  createCustomer(customerInfo: any): Observable<Customer> {\n    let currentrequestdigest=(<HTMLInputElement>document.getElementById('__REQUESTDIGEST')).value;\n    let headers = new Headers({ \"accept\": \"application/json;odata=verbose\",\n            \"X-RequestDigest\": currentrequestdigest,\n            \"content-Type\": \"application/json;odata=verbose\",\n            });\n    let options = new RequestOptions({ headers: headers });\n    return this.http.post(this.customerUrl, customerInfo , options)\n                    .map(this.extractData)\n                    .do(data => this.getCustomers())\n                    .catch(this.handleError);\n  }\n  private extractData(response: Response) {\n        let data = response.json();\n        console.log(\"Body\");\n        console.log(data);\n        return data.d.results || {};\n    }\n\n    private handleError(error: Response): Observable<any> {\n        console.log(\"error\");\n        console.error(error);\n        return Observable.throw(error.json().error || 'Server error');\n    }\n\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/product.service.ts","import { Component, OnInit } from '@angular/core';\n\nimport { Customer } from './customer';\nimport { ProductService } from '../product.service';\n@Component({\n  selector: 'app-customerlist',\n  templateUrl: './customerlist.component.html',\n  styleUrls: ['./customerlist.component.css']\n})\nexport class CustomerlistComponent implements OnInit {\n    pageTitle: string = 'Product List';\n    imageWidth: number = 50;\n    imageMargin: number = 2;\n    showImage: boolean = false;\n    listFilter: string;\n    errorMessage: string;\n    products: Customer[];\n  constructor(private productService: ProductService) { }\n    ngOnInit(): void {\n      console.log(\"customer list ngonit\")\n        this.productService.getCustomers()\n                .subscribe(products => this.products = products,\n                           error => this.errorMessage = <any>error);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/customer/customerlist.component.ts","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 87;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 87\n// module chunks = 1","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app works!!';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { RouterModule } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { CustomerComponent } from './customer/customer.component';\nimport { ProductService } from './product.service';\nimport { CustomerlistComponent } from './customer/customerlist.component';\nimport { ProductModule } from './product/product.module';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CustomerComponent,\n    CustomerlistComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    RouterModule.forRoot([\n      { path: 'welcome', component: CustomerComponent },\n      { path: '', redirectTo: 'welcome', pathMatch: 'full' },\n      { path: '**', redirectTo: 'welcome', pathMatch: 'full' }\n    ]),\n    ProductModule\n  ],\n  providers: [ProductService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\n\r\nimport { Customer } from './customer';\r\nimport { ProductService } from '../product.service';\r\n\r\n@Component({\r\n    selector: 'my-signup',\r\n    templateUrl: './customer.component.html'\r\n})\r\nexport class CustomerComponent implements OnInit  {\r\n    constructor(private productService: ProductService) {\r\n\r\n    }\r\n    \r\n    ngOnInit(): void {\r\n        /*\r\n       this.productService.getCustomers()\r\n                .subscribe(products => console.log('testing getCustomers:'),\r\n                           error => console.log('testing error getCustomers: '));\r\n                           */\r\n    }\r\n    customer: Customer= new Customer();\r\n\r\n    save(customerForm: NgForm) {\r\n        var json_string = JSON.stringify(customerForm.value);\r\n        var json_obj = JSON.parse(json_string);\r\n        json_obj['__metadata'] = { \"type\": \"SP.Data.HelloListListItem\" };\r\n        json_string = JSON.stringify( json_obj );\r\n        console.log( json_string );\r\n        this.productService.createCustomer(json_string)\r\n        .subscribe(products =>  this.productService.getCustomers(),\r\n                           error => console.log('testing error createCustomers: '));\r\n                        \r\n    }\r\n }\n\n\n// WEBPACK FOOTER //\n// ./src/app/customer/customer.component.ts","export class Customer {\r\n\r\n    constructor(public FirstName = '',\r\n        public LastName = '',\r\n        public Email = '',\r\n       // public sendCatalog = false,\r\n        public addressType = 'home',\r\n        public street1?: string,\r\n        public street2?: string,\r\n        public city?: string,\r\n        public state = '',\r\n        public zip?: string) { }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/customer/customer.ts","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { Customer } from '../customer/customer';\nimport { CustomerlistComponent } from '../customer/customerlist.component';\nimport { ProductService } from '../product.service';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forChild([\n      { path: 'products', component: CustomerlistComponent }\n     // { path: 'product',component: CustomerComponent},\n     ])],\n \n  exports: [RouterModule]\n})\nexport class ProductRoutingModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/product/product-routing.module.ts","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProductRoutingModule } from './product-routing.module';\n//import { CustomerlistComponent } from '../customer/customerlist.component';\n//import { ProductService } from '../product.service';\n@NgModule({\n  imports: [\n    CommonModule,\n    ProductRoutingModule\n  ],\n  declarations: [\n     // CustomerlistComponent\n     // CustomerComponent\n    ],\n  providers: [\n     // ProductService\n    ]\n})\nexport class ProductModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/product/product.module.ts"],"sourceRoot":""}